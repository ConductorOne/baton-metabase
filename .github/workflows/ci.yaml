name: ci
on:
  pull_request:
    types: [opened, reopened, synchronize]
  push:
    branches:
      - main
jobs:
  go-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Run linters
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          args: --timeout=3m
  go-test:
    strategy:
      matrix:
        platform: [ubuntu-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Go
        if: success()
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: go tests
        run: go test -v -covermode=count -json ./... > test.json
      - name: annotate go tests
        if: always()
        uses: guyarb/golang-test-annotations@v0.8.0
        with:
          test-results: test.json

  test:
    runs-on: ubuntu-latest
    env:
      BATON_LOG_LEVEL: debug
      BATON_METABASE_BASE_URL: http://localhost:3000
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Set up Docker
        run: |
          docker pull metabase/metabase:v0.56.0-beta

      - name: Start Metabase
        run: |
          docker run -d -p 3000:3000 --name metabase-ci \
            -e MB_DB_FILE=/metabase.db \
            -v metabase-data-ci:/metabase.db \
            metabase/metabase:v0.56.0-beta
          sleep 30

      - name: Create CI Admin user
        id: ci_admin
        run: |
          SETUP_TOKEN=$(curl -s $BATON_METABASE_BASE_URL/api/session/properties | jq -r '.["setup-token"]')
          curl -s -X POST $BATON_METABASE_BASE_URL/api/setup \
            -H "Content-Type: application/json" \
            -d '{
                  "token": "'"$SETUP_TOKEN"'",
                  "user": {
                    "first_name": "CI",
                    "last_name": "Admin",
                    "email": "ci@metabase.local",
                    "password": "Admin123!"
                  },
                  "prefs": {"site_name": "Metabase CI"},
                  "database": null
                }'

      - name: Log in CI Admin
        id: login
        run: |
          SESSION_ID=$(curl -s -X POST $BATON_METABASE_BASE_URL/api/session \
            -H "Content-Type: application/json" \
            -d '{
                  "username": "ci@metabase.local",
                  "password": "Admin123!"
                }' | jq -r '.id')
          echo "session_id=$SESSION_ID" >> $GITHUB_OUTPUT
          sleep 5

      - name: Create API Key
        id: api_key
        run: |
          API_KEY_JSON=$(curl -s -X POST $BATON_METABASE_BASE_URL/api/api-key/ \
            -H "Content-Type: application/json" \
            -H "X-Metabase-Session: ${{ steps.login.outputs.session_id }}" \
            -d '{
                  "group_id": 1,
                  "name": "CI Key",
                  "return_key": true
                }')
          API_KEY=$(echo "$API_KEY_JSON" | jq -r '.unmasked_key')
          echo "api_key=$API_KEY" >> $GITHUB_OUTPUT

      - name: Export API key as env var
        run: echo "BATON_METABASE_API_KEY=${{ steps.api_key.outputs.api_key }}" >> $GITHUB_ENV

      - name: Build baton-metabase
        run: go build ./cmd/baton-metabase

      - name: Create test group
        id: create_group
        run: |
          GROUP_JSON=$(curl -s -X POST $BATON_METABASE_BASE_URL/api/permissions/group \
            -H "Content-Type: application/json" \
            -H "X-Metabase-Session: ${{ steps.login.outputs.session_id }}" \
            -d '{"name": "group-ci"}')
          GROUP_ID=$(echo "$GROUP_JSON" | jq -r '.id')
          echo "group_id=$GROUP_ID" >> $GITHUB_OUTPUT

      - name: Create test user
        id: test_user
        run: |
          USER_JSON=$(curl -s -X POST $BATON_METABASE_BASE_URL/api/user \
            -H "Content-Type: application/json" \
            -H "X-Metabase-Session: ${{ steps.login.outputs.session_id }}" \
            -d '{
                  "first_name": "CI",
                  "last_name": "User",
                  "email": "ci-user@metabase.local",
                  "password": "Admin123!"
                }')
          USER_ID=$(echo "$USER_JSON" | jq -r '.id')
          echo "user_id=$USER_ID" >> $GITHUB_OUTPUT

      - name: Test syncing
        uses: ConductorOne/github-workflows/actions/sync-test@v2
        with:
          connector: ./baton-metabase
          baton-entitlement: group:${{steps.create_group.outputs.group_id}}:member
          baton-principal: ${{steps.test_user.outputs.user_id}}
          baton-principal-type: 'user'

      - name: Clean up
        if: always()
        run: docker rm -f metabase-ci || true

